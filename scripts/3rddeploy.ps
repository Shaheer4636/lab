#!/usr/bin/env bash
set -euo pipefail

# ---- ADO vars (must be mapped or defined as Release variables) ----
AEM_DEPLOY_URL='$(AEM_DEPLOY_URL)'
AEM_DEPLOY_USERNAME='$(AEM_DEPLOY_USERNAME)'
AEM_DEPLOY_PASSWORD='$(AEM_DEPLOY_PASSWORD)'
AEM_DEPLOY_ARTIFACT_FOLDER='$(AEM_DEPLOY_ARTIFACT_FOLDER)'

for v in AEM_DEPLOY_URL AEM_DEPLOY_USERNAME AEM_DEPLOY_PASSWORD AEM_DEPLOY_ARTIFACT_FOLDER; do
  val="${!v}"; [[ -z "$val" || "$val" == *'$('* ]] && { echo "ERROR: $v not set"; exit 1; }
done

RETRIES=3
BACKOFF=15

# ---- pick the ZIP ----
FILEPATH="$(ls "$AEM_DEPLOY_ARTIFACT_FOLDER"/*.zip -1 2>/dev/null | head -n1 || true)"
[[ -z "${FILEPATH}" ]] && { echo "No ZIP in $AEM_DEPLOY_ARTIFACT_FOLDER"; exit 0; }
FILENAME="$(basename "$FILEPATH")"
BASENAME="${FILENAME%.zip}"

REGISTRY="com.bridgestone.bsro.aem"
[[ "$BASENAME" == xtc* ]] && REGISTRY="bsro_hotfix"

PKG_PATH="/etc/packages/${REGISTRY}/${FILENAME}"
PKG_URL="${AEM_DEPLOY_URL}${PKG_PATH}"

echo "Package: $PKG_PATH"
echo "From:    $FILEPATH"

has_cmd(){ command -v "$1" >/dev/null 2>&1; }

json_success () {
  # echo "true" if {"success":true}, otherwise "false"
  if has_cmd jq; then
    echo "$1" | jq -r '.success // empty' 2>/dev/null | grep -qi '^true$' && echo true || echo false
  else
    [[ "$1" =~ \"success\"[[:space:]]*:[[:space:]]*true ]] && echo true || echo false
  fi
}

http_code () {
  curl -sS -L -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" -o /dev/null -w '%{http_code}' "$1" || echo 000
}

# ---- upload with JSON API (authoritative) ----
for ((i=1;i<=RETRIES;i++)); do
  echo "Upload attempt $i/$RETRIES"
  RESP="$(curl -sS -L \
      -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" \
      -H 'Accept: application/json' -H 'X-Requested-With: Curl' \
      -F "file=@${FILEPATH}" \
      -F "name=${FILENAME}" \
      -F "force=true" \
      -F "install=false" \
      -F "package=${PKG_PATH}" \
      "${AEM_DEPLOY_URL}/crx/packmgr/service/.json?cmd=upload" || true)"

  OK="$(json_success "$RESP")"
  echo "Upload JSON success: $OK"

  # fallback verification: direct HTTP code on the package URL
  CODE="$(http_code "$PKG_URL")"
  echo "Package URL HTTP code: $CODE"

  if [[ "$OK" == "true" || "$CODE" == "200" ]]; then
    echo "Upload confirmed."
    break
  fi

  if [[ $i -lt $RETRIES ]]; then
    sleep $((BACKOFF + 5*i))
  else
    echo "ERROR: Upload failed. Last response:"
    echo "$RESP" | head -c 800
    exit 1
  fi
done

# ---- optional: clear pauseInstallation ----
PAUSE_JSON_URL="${AEM_DEPLOY_URL}/system/sling/installer/jcr/pauseInstallation.1.json"
PAUSE_RESP="$(curl -sS -L -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" "$PAUSE_JSON_URL" || true)"
if has_cmd jq; then
  COUNT="$(echo "$PAUSE_RESP" | jq -r 'keys // [] | length' 2>/dev/null || echo 0)"
else
  COUNT="$(echo "$PAUSE_RESP" | grep -oE '"[^"]*"\s*:' | wc -l | awk '{print $1}')"
fi
echo "pauseInstallation nodes: ${COUNT:-0}"
if [[ "${COUNT:-0}" -gt 0 ]]; then
  echo "Deleting pauseInstallation nodeâ€¦"
  curl -sS -L -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" -X DELETE \
       "${AEM_DEPLOY_URL}/system/sling/installer/jcr/pauseInstallation" >/dev/null || true
fi

# ---- install with JSON API ----
for ((i=1;i<=RETRIES;i++)); do
  echo "Install attempt $i/$RETRIES"
  INSTALL_URL="${AEM_DEPLOY_URL}/crx/packmgr/service/.json${PKG_PATH}?cmd=install"
  RESP="$(curl -sS -L -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" \
          -H 'Accept: application/json' -H 'X-Requested-With: Curl' \
          -X POST "$INSTALL_URL" || true)"
  OK="$(json_success "$RESP")"
  echo "Install JSON success: $OK"

  if [[ "$OK" == "true" ]]; then
    echo "Install succeeded."
    exit 0
  fi

  if [[ $i -lt $RETRIES ]]; then
    sleep $((BACKOFF + 5*i))
  else
    echo "ERROR: Install failed. Last response:"
    echo "$RESP" | head -c 800
    exit 1
  fi
done
