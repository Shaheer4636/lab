#!/usr/bin/env bash
set -euo pipefail

# ADO variables
AEM_DEPLOY_URL='$(AEM_DEPLOY_URL)'
AEM_DEPLOY_USERNAME='$(AEM_DEPLOY_USERNAME)'
AEM_DEPLOY_PASSWORD='$(AEM_DEPLOY_PASSWORD)'
AEM_DEPLOY_ARTIFACT_FOLDER='$(AEM_DEPLOY_ARTIFACT_FOLDER)'

# Guard
for v in AEM_DEPLOY_URL AEM_DEPLOY_USERNAME AEM_DEPLOY_PASSWORD AEM_DEPLOY_ARTIFACT_FOLDER; do
  val="${!v}"; if [[ -z "$val" || "$val" == *'$('* ]]; then
    echo "ERROR: $v is not set"; exit 1; fi
done

RETRIES=3
BACKOFF=20

# Pick ZIP
FILEPATH="$(ls "$AEM_DEPLOY_ARTIFACT_FOLDER"/*.zip -1 2>/dev/null | head -n1 || true)"
if [[ -z "$FILEPATH" ]]; then
  echo "No ZIP found in $AEM_DEPLOY_ARTIFACT_FOLDER"; exit 0
fi
FILENAME="$(basename "$FILEPATH")"
BASENAME="${FILENAME%.zip}"
REGISTRY="com.bridgestone.bsro.aem"
[[ "$BASENAME" == xtc* ]] && REGISTRY="bsro_hotfix"

echo "Deploying package: $FILENAME"
echo "Package group:     $REGISTRY"
echo "From folder:       $AEM_DEPLOY_ARTIFACT_FOLDER"

has_cmd(){ command -v "$1" >/dev/null 2>&1; }

# Return "true"/"false" by parsing JSON; follow redirects; show response if asked
pm_post_success () {
  local url="$1" show="$2"
  # follow redirects (-L) and fail on HTTP errors (-f); do not exit script on curl failure
  local resp; resp="$(curl -s -L -f -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" -X POST "$url" || true)"
  [[ "$show" == "1" ]] && echo "DEBUG preview resp: ${resp:0:300}"
  if has_cmd jq; then
    local v; v="$(echo "$resp" | jq -r '.success // empty' 2>/dev/null || true)"
    [[ "$v" == "true" ]] && echo "true" || echo "false"
  else
    [[ "$resp" =~ \"success\"[[:space:]]*:[[:space:]]*true ]] && echo "true" || echo "false"
  fi
}

# HEAD/GET existence check for the package URL (fallback if preview is flaky)
pkg_exists_http () {
  local url="$1"
  local code
  code="$(curl -s -L -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" -o /dev/null -w '%{http_code}' "$url" || true)"
  [[ "$code" == "200" ]] && echo "true" || echo "false"
}

# --- Upload with retries ---
for ((i=1; i<=RETRIES; i++)); do
  echo "Upload attempt $i/$RETRIES"

  curl -s -L -f -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" \
       -F "file=@${FILEPATH}" \
       -F "name=${FILENAME}" \
       -F "force=true" \
       -F "install=false" \
       "${AEM_DEPLOY_URL}/crx/packmgr/service.jsp" >/dev/null || true

  sleep 3  # give AEM a moment to write package

  PREVIEW_URL="${AEM_DEPLOY_URL}/crx/packmgr/service/.json/etc/packages/${REGISTRY}/${FILENAME}?cmd=preview"
  EXISTS_REMOTE="$(pm_post_success "$PREVIEW_URL" "$([[ $i -eq 1 ]] && echo 1 || echo 0)")"
  echo "Preview success: ${EXISTS_REMOTE:-<empty>}"

  if [[ "$EXISTS_REMOTE" != "true" ]]; then
    # fallback: direct HTTP existence check
    PKG_URL="${AEM_DEPLOY_URL}/etc/packages/${REGISTRY}/${FILENAME}"
    EXISTS_REMOTE="$(pkg_exists_http "$PKG_URL")"
    echo "HTTP 200 existence: $EXISTS_REMOTE"
  fi

  if [[ "$EXISTS_REMOTE" == "true" ]]; then
    echo "Upload confirmed."
    break
  fi

  if [[ $i -lt $RETRIES ]]; then
    sleep $((BACKOFF + 5*i))
  else
    echo "ERROR: Upload failed after $RETRIES attempts."
    exit 1
  fi
done

# --- Optional: clear pauseInstallation ---
PAUSE_JSON_URL="${AEM_DEPLOY_URL}/system/sling/installer/jcr/pauseInstallation.1.json"
if has_cmd jq; then
  COUNT_NODES="$(curl -s -L -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" "$PAUSE_JSON_URL" | jq -r 'keys // [] | length' 2>/dev/null || echo 0)"
else
  COUNT_NODES="$(curl -s -L -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" "$PAUSE_JSON_URL" | grep -oE '"[^"]*"\s*:' | wc -l | awk '{print $1}')"
fi
echo "pauseInstallation nodes: $COUNT_NODES"
if [[ "${COUNT_NODES:-0}" -gt 0 ]]; then
  echo "Deleting pauseInstallation nodeâ€¦"
  curl -s -L -f -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" -X DELETE \
       "${AEM_DEPLOY_URL}/system/sling/installer/jcr/pauseInstallation" >/dev/null || true
fi

# --- Install with retries ---
for ((i=1; i<=RETRIES; i++)); do
  echo "Install attempt $i/$RETRIES"
  INSTALL_URL="${AEM_DEPLOY_URL}/crx/packmgr/service/.json/etc/packages/${REGISTRY}/${BASENAME}?cmd=install"
  RESULT="$(pm_post_success "$INSTALL_URL" 0)"
  echo "Install result: ${RESULT:-<empty>}"

  if [[ "$RESULT" == "true" ]]; then
    echo "Install succeeded."
    exit 0
  fi

  if [[ $i -lt $RETRIES ]]; then
    sleep $((BACKOFF + 5*i))
  else
    echo "ERROR: Install failed after $RETRIES attempts."
    exit 1
  fi
done
