#!/usr/bin/env bash
set -euo pipefail

# --- Release variables (macro-substituted before bash runs) ---
AEM_DEPLOY_URL='$(AEM_DEPLOY_URL)'
AEM_DEPLOY_USERNAME='$(AEM_DEPLOY_USERNAME)'
AEM_DEPLOY_PASSWORD='$(AEM_DEPLOY_PASSWORD)'
AEM_DEPLOY_ZIP_VAR='$(AEM_DEPLOY_ZIP)'   # set by previous "check if artifact exists" step (if used)

# Guard: ensure required creds/URL are present (and were macro-substituted)
for v in AEM_DEPLOY_URL AEM_DEPLOY_USERNAME AEM_DEPLOY_PASSWORD; do
  val="${!v}"
  if [[ -z "$val" || "$val" == *'$('* ]]; then
    echo "$v is not set. Skipping deploy check."
    echo "##vso[task.setvariable variable=shouldDeploy;]False"
    exit 0
  fi
done

# --- Locate the artifact zip ---
ROOT="${SYSTEM_DEFAULTWORKINGDIRECTORY:-$(System.DefaultWorkingDirectory)}"
ZIP_NAME_DEFAULT="dwdpkg-auth-artifacts.zip"
ARTIFACT_DIRNAME_DEFAULT="AuthorContent"

# Prefer the explicit path from the previous step
if [[ -n "${AEM_DEPLOY_ZIP_VAR:-}" && -f "$AEM_DEPLOY_ZIP_VAR" ]]; then
  FILEPATH="$AEM_DEPLOY_ZIP_VAR"
else
  # Resolve like the previous step
  ALIAS="${RELEASE_PRIMARYARTIFACTSOURCEALIAS:-$(Release.PrimaryArtifactSourceAlias)}"
  bases=("$ROOT/_$ALIAS" "$ROOT/$ALIAS" "$ROOT")
  found_dir=""
  for b in "${bases[@]}"; do
    candidate="$b/${ARTIFACT_DIRNAME_DEFAULT}"
    [[ -d "$candidate" ]] && found_dir="$candidate" && break
  done
  # Fallback: search
  if [[ -z "$found_dir" ]]; then
    mapfile -t zips < <(find "$ROOT" -maxdepth 6 -type f \( -name "$ZIP_NAME_DEFAULT" -o -name "*auth*.zip" \) 2>/dev/null | sort)
    [[ ${#zips[@]} -gt 0 ]] && found_dir="$(dirname "${zips[-1]}")"
  fi

  if [[ -z "${found_dir:-}" || ! -d "$found_dir" ]]; then
    echo "Could not resolve artifact directory. Skipping."
    echo "##vso[task.setvariable variable=shouldDeploy;]False"
    exit 0
  fi

  if [[ -f "$found_dir/$ZIP_NAME_DEFAULT" ]]; then
    FILEPATH="$found_dir/$ZIP_NAME_DEFAULT"
  else
    FILEPATH="$(find "$found_dir" -maxdepth 2 -type f -name "*auth*.zip" | sort | tail -n1 || true)"
  fi
fi

if [[ -z "${FILEPATH:-}" || ! -f "$FILEPATH" ]]; then
  echo "Auth ZIP not found. Skipping."
  echo "##vso[task.setvariable variable=shouldDeploy;]False"
  exit 0
fi

if [[ ! -s "$FILEPATH" ]]; then
  echo "ZIP exists but is empty: $FILEPATH"
  echo "##vso[task.setvariable variable=shouldDeploy;]False"
  exit 0
fi

FILENAME="$(basename "$FILEPATH")"    # e.g., dwdpkg-auth-artifacts.zip
BASENAME="${FILENAME%.zip}"

# Package group (registry)
REGISTRY="com.bridgestone.bsro.aem"
[[ "$BASENAME" == xtc* ]] && REGISTRY="bsro_hotfix"

echo "Using ZIP: $FILEPATH"
echo "Package group: $REGISTRY"

# --- Check remote existence via Package Manager preview ---
PREVIEW_URL="${AEM_DEPLOY_URL}/crx/packmgr/service/.json/etc/packages/${REGISTRY}/${FILENAME}?cmd=preview"
PREVIEW_JSON="$(curl -fsS -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" -X POST "$PREVIEW_URL" || true)"

remote_exists="false"
if echo "$PREVIEW_JSON" | grep -qE '"success"[[:space:]]*:[[:space:]]*true'; then
  remote_exists="true"
fi

# --- Compare checksums if remote exists ---
if [[ "$remote_exists" == "true" ]]; then
  echo "Remote package exists. Comparing checksumsâ€¦"
  # Stream the remote zip into md5
  HASH_REMOTE="$(curl -fsSL -u "${AEM_DEPLOY_USERNAME}:${AEM_DEPLOY_PASSWORD}" \
                   "${AEM_DEPLOY_URL}/etc/packages/${REGISTRY}/${FILENAME}" | md5sum | awk '{print $1}' || true)"
  if [[ -z "$HASH_REMOTE" ]]; then
    echo "Could not compute remote md5. Proceed with deploy (safe default)."
    echo "##vso[task.setvariable variable=AEM_DEPLOY_ZIP;]$FILEPATH"
    echo "##vso[task.setvariable variable=shouldDeploy;]True"
    exit 0
  fi

  HASH_LOCAL="$(md5sum "$FILEPATH" | awk '{print $1}')"
  echo "Remote md5: $HASH_REMOTE"
  echo "Local  md5: $HASH_LOCAL"

  if [[ "$HASH_REMOTE" == "$HASH_LOCAL" ]]; then
    echo "Checksums match. Already deployed. Skipping."
    echo "##vso[task.setvariable variable=AEM_DEPLOY_ZIP;]$FILEPATH"
    echo "##vso[task.setvariable variable=shouldDeploy;]False"
    exit 0
  else
    echo "Checksums differ. Deploy needed."
    echo "##vso[task.setvariable variable=AEM_DEPLOY_ZIP;]$FILEPATH"
    echo "##vso[task.setvariable variable=shouldDeploy;]True"
    exit 0
  fi
else
  echo "Remote package not found. Deploy needed."
  echo "##vso[task.setvariable variable=AEM_DEPLOY_ZIP;]$FILEPATH"
  echo "##vso[task.setvariable variable=shouldDeploy;]True"
  exit 0
fi
