include:
  - project : 'mediagrif/strategic-sourcing/devops/base-ci-configuration'
    ref     : master
    file    :
      - 'AWS/AWS-Multi-Credentials.gitlab-ci.yml'

default:
  tags:
    - techops-ansible-terraform

variables:
  ANSIBLE_HOST_KEY_CHECKING: "False"
  ANSIBLE_FORCE_COLOR: "True"

stages:
  - run-lint
  - trivy-security-scan
  - plan
  - run

#############
# Templates #
#############
.uat_variables: &uat_variables
  INVENTORY: "inventory/uat.aws_ec2.yml"

.prod_variables: &prod_variables
  INVENTORY: "inventory/prod.aws_ec2.yml"

.ftp_variables: &ftp_variables
  TAGS: "ftp"

.cron_variables: &cron_variables
  TAGS: "cron"

.check_template: &check_template
  stage: plan
  script:
    - ansible-playbook -i ${INVENTORY} manage_tasks.yml -e nodes=tag_type_util,tag_type_app --diff --check --tags ${TAGS}

.run_template: &run_template
  stage: run
  script:
    - ansible-playbook -i ${INVENTORY} manage_tasks.yml -e nodes=tag_type_util,tag_type_app --diff --tags ${TAGS}
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - if: '$CI_COMMIT_MESSAGE =~ /run ansible/i'
      when: on_success
    - when: never

###########################
# Ansible Validation Jobs #
###########################
run_ansible_syntax_checks:
  stage: run-lint
  script:
    - ansible --version
    - ansible-lint manage_tasks.yml IpAddress.yml ping.yml

run_security_scan:
  stage: trivy-security-scan
  script:
    - sh trivy-filesystem-scan.sh

######################
# Ansible Check Jobs #
######################
check_ansible_playbook_ftp_uat:
  <<: *check_template
  variables:
    <<: *uat_variables
    <<: *ftp_variables

check_ansible_playbook_ftp_prod:
  <<: *check_template
  variables:
    <<: *prod_variables
    <<: *ftp_variables

check_ansible_playbook_cron_uat:
  <<: *check_template
  variables:
    <<: *uat_variables
    <<: *cron_variables

check_ansible_playbook_cron_prod:
  <<: *check_template
  variables:
    <<: *prod_variables
    <<: *cron_variables

####################
# Ansible Run Jobs #
####################
run_ansible_playbook_ftp_uat:
  <<: *run_template
  variables:
    <<: *uat_variables
    <<: *ftp_variables

run_ansible_playbook_ftp_prod:
  <<: *run_template
  variables:
    <<: *prod_variables
    <<: *ftp_variables

run_ansible_playbook_cron_uat:
  <<: *run_template
  variables:
    <<: *uat_variables
    <<: *cron_variables
  dependencies:
    - run_ansible_playbook_ftp_uat

run_ansible_playbook_cron_prod:
  <<: *run_template
  variables:
    <<: *prod_variables
    <<: *cron_variables
  dependencies:
    - run_ansible_playbook_ftp_prod

# Cron Deployment Job
cron_monitoring_deploy:
  stage: run
  tags:
    - techops-ansible-terraform
  script:
    - echo "Deploying cronjob and monitoring scripts..."
    - ssh $TARGET_SERVER "sudo mkdir -p /usr/local/bin"
    - scp cronjob/check_s3_mount.sh $TARGET_SERVER:/tmp/
    - scp cronjob/cloud-watch-agent.json $TARGET_SERVER:/tmp/
    - scp cronjob/s3mount.cron $TARGET_SERVER:/tmp/
    - ssh $TARGET_SERVER "sudo mv /tmp/check_s3_mount.sh /usr/local/bin/ && sudo chmod +x /usr/local/bin/check_s3_mount.sh"
    - ssh $TARGET_SERVER "sudo mv /tmp/cloud-watch-agent.json /etc/amazon-cloudwatch-agent.json"
    - ssh $TARGET_SERVER "sudo mv /tmp/s3mount.cron /etc/cron.d/s3mount && sudo chmod 644 /etc/cron.d/s3mount"
    - ssh $TARGET_SERVER "sudo yum install -y amazon-cloudwatch-agent || true"
    - ssh $TARGET_SERVER "sudo systemctl restart crond"
    - ssh $TARGET_SERVER "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a append-config -m ec2 -c file:/etc/amazon-cloudwatch-agent.json -s"
  only:
    - main
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
