trigger: none

pool:
  name: "CWH Sandbox BSRO"

variables:
  sourceProjectId: '39785de8-4f00-4b0f-bb9c-d70ab9809232'   # from your URL
  sourcePipelineId: '849'                                    # definitionId from the pipeline link
  sourceBuildId: '328818'                                    # build that produced the artifacts

stages:
- stage: FetchAndRepublish
  displayName: Download & republish build $(sourceBuildId) artifacts
  jobs:
  - job: Fetch
    steps:
    - bash: |
        set -euxo pipefail
        rm -rf dwdpkg-artifacts || true
        mkdir -p dwdpkg-artifacts
      displayName: Prep folders

    # Download "Author Content"
    - task: DownloadBuildArtifacts@1
      displayName: Download "dwdpkg-auth-artifacts"
      inputs:
        buildType: 'specific'
        project: '$(sourceProjectId)'
        pipeline: '$(sourcePipelineId)'        # alias: definition
        buildVersionToDownload: 'specific'
        buildId: '$(sourceBuildId)'
        downloadType: 'single'
        artifactName: 'dwdpkg-auth-artifacts'
        downloadPath: '$(Build.SourcesDirectory)/dwdpkg-artifacts'

    # Download "Publish Content"
    - task: DownloadBuildArtifacts@1
      displayName: Download "dwdpkg-pub-artifacts"
      inputs:
        buildType: 'specific'
        project: '$(sourceProjectId)'
        pipeline: '$(sourcePipelineId)'
        buildVersionToDownload: 'specific'
        buildId: '$(sourceBuildId)'
        downloadType: 'single'
        artifactName: 'dwdpkg-pub-artifacts'
        downloadPath: '$(Build.SourcesDirectory)/dwdpkg-artifacts'

    # Normalize folder names to match your publish paths
    - bash: |
        set -euxo pipefail
        # If the tasks created folders named after the artifact, rename them
        if [ -d "dwdpkg-artifacts/dwdpkg-auth-artifacts" ]; then
          rm -rf dwdpkg-artifacts/auth || true
          mv dwdpkg-artifacts/dwdpkg-auth-artifacts dwdpkg-artifacts/auth
        fi
        if [ -d "dwdpkg-artifacts/dwdpkg-pub-artifacts" ]; then
          rm -rf dwdpkg-artifacts/pub || true
          mv dwdpkg-artifacts/dwdpkg-pub-artifacts dwdpkg-artifacts/pub
        fi
        # Ensure paths exist even if artifacts were empty
        mkdir -p dwdpkg-artifacts/auth dwdpkg-artifacts/pub
        ls -la dwdpkg-artifacts/auth || true
        ls -la dwdpkg-artifacts/pub || true
      displayName: Normalize downloaded paths

    # Re-publish as build artifacts
    - task: PublishBuildArtifacts@1
      displayName: Publish "Author Content"
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/dwdpkg-artifacts/auth'
        ArtifactName: 'dwdpkg-auth-artifacts'
        publishLocation: 'Container'

    - task: PublishBuildArtifacts@1
      displayName: Publish "Publish Content"
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/dwdpkg-artifacts/pub'
        ArtifactName: 'dwdpkg-pub-artifacts'
        publishLocation: 'Container'
