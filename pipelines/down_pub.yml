trigger: none

pool:
  name: "CWH Sandbox BSRO"

variables:
  sourceProject: 'BSRO'                 # Project NAME (not GUID)
  sourceDefinitionId: '849'             # Pipeline definitionId
  sourceBuildId: '328818'               # Build that produced the artifacts
  authArtifact: 'dwdpkg-auth-artifacts' # Artifact names (must match source build)
  pubArtifact:  'dwdpkg-pub-artifacts'

stages:
- stage: DownloadAndRepublish
  displayName: Download & republish $(sourceBuildId)
  jobs:
  - job: Fetch
    displayName: Fetch and publish
    steps:
    - checkout: none

    - task: DeleteFiles@1
      displayName: Clean dwdpkg-artifacts
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: 'dwdpkg-artifacts/**'
        RemoveSourceFolder: false

    - bash: |
        set -euxo pipefail
        mkdir -p "$(Build.SourcesDirectory)/dwdpkg-artifacts"
      displayName: Prep folders

    # Download "Author Content"
    - task: DownloadBuildArtifacts@1
      displayName: Download "$(authArtifact)"
      inputs:
        buildType: 'specific'
        project: '$(sourceProject)'            # Use project NAME
        definition: '$(sourceDefinitionId)'    # definitionId of the source pipeline
        buildVersionToDownload: 'specific'
        buildId: '$(sourceBuildId)'
        downloadType: 'single'
        artifactName: '$(authArtifact)'
        downloadPath: '$(Build.SourcesDirectory)/dwdpkg-artifacts'

    # Download "Publish Content"
    - task: DownloadBuildArtifacts@1
      displayName: Download "$(pubArtifact)"
      inputs:
        buildType: 'specific'
        project: '$(sourceProject)'
        definition: '$(sourceDefinitionId)'
        buildVersionToDownload: 'specific'
        buildId: '$(sourceBuildId)'
        downloadType: 'single'
        artifactName: '$(pubArtifact)'
        downloadPath: '$(Build.SourcesDirectory)/dwdpkg-artifacts'

    # Normalize to the folder names your publish step expects
    - bash: |
        set -euxo pipefail
        ROOT="$(Build.SourcesDirectory)/dwdpkg-artifacts"
        if [ -d "$ROOT/$(authArtifact)" ]; then
          rm -rf "$ROOT/auth"
          mv "$ROOT/$(authArtifact)" "$ROOT/auth"
        fi
        if [ -d "$ROOT/$(pubArtifact)" ]; then
          rm -rf "$ROOT/pub"
          mv "$ROOT/$(pubArtifact)" "$ROOT/pub"
        fi
        mkdir -p "$ROOT/auth" "$ROOT/pub"
        echo "Auth contents:" && ls -la "$ROOT/auth" || true
        echo "Pub contents:"  && ls -la "$ROOT/pub"  || true
      displayName: Normalize folders

    # Re-publish as build artifacts (same names)
    - task: PublishBuildArtifacts@1
      displayName: Publish "Author Content"
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/dwdpkg-artifacts/auth'
        ArtifactName: 'dwdpkg-auth-artifacts'
        publishLocation: 'Container'

    - task: PublishBuildArtifacts@1
      displayName: Publish "Publish Content"
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/dwdpkg-artifacts/pub'
        ArtifactName: 'dwdpkg-pub-artifacts'
        publishLocation: 'Container'
